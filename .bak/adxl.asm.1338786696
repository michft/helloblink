;
; adxl.asm
;
; moving ears via attiny13A from adxl345 i2c input.
;
;
; copyright (CC BY-NC 3.0)
; http://creativecommons.org/licenses/by-nc/3.0/
;
; Version           : 0.1
; Date		    : 20120523
; Author	    : Michael Tomkins
; Target MCU        : ATTINY13
;

; You can get the tn13def.inc from http://www.attiny.com/software/AVR000.zip
; or http://www.atmel.com/products/microcontrollers/avr/tinyAVR.aspx

.include "tn13def.inc"

; i2c library from
; http://www.cs.washington.edu/education/courses/cse466/00au/Projects/LakeMan/adv/datasheets/i2c_ex.asm

;.include "i2c_ex.S"
.include "libi2c.S"	; My syntax fixed version

; Referenced code from

; http://www.nickdademo.com/articles/avr/how-to-peter-fleurys-i2c-driver-and-the-avr-xmega
; http://www.jrobot.net/Download/AVRcam_tiny12.asm

; Other Links

; http://mil.ufl.edu/5666/papers/IMDL_Report_Summer_03/koessick_max/Assembly%20Files/TWI/avr300_asm.htm
; http://homepage.hispeed.ch/peterfleury/avr-software.html
; http://www.attiny.com/software/AVR000.zip
; http://www.atmel.com/products/microcontrollers/avr/tinyAVR.aspx

.equ    SCLP    , 4                     ; SCL Pin number (port B)
.equ    SDAP    , 3                     ; SDA Pin number (port B)

.equ    b_dir   , 0                     ; transfer direction bit in r18

.equ    i2crd   , 1
.equ    i2cwr   , 0

;**** Global Register Variables ****

; did find/paste because syntax eluded me. mich
;.set   i2cdelay, r16                   ; Delay loop variable
;.set   i2cdata , r17                   ; I2C data transfer register
;.set   i2cadr  , r18                   ; I2C address and direction register
;.set   i2cstat , r19                   ; I2C bus status register





	rjmp	RESET		;reset handle

;kull if needed for space.
;* Long delay
; http://arduino.cc blink delay code.

long_delay:
; =============================
	clr   r0	;r0 used as delay 2nd count
	clr   r1	;r1 used as delay 3d count
wg_delay:
	dec   r0
	brne  wg_delay
	dec   r1
	brne  wg_delay
	dec   r16		; r16 must be preset
	brne  wg_delay		; delay master count
	ret
; =============================

;*************************************************************************
; Modified code from
; http://www.nickdademo.com/articles/avr/how-to-peter-fleurys-i2c-driver-and-the-avr-xmega
;
; For I2C in normal mode (100kHz), use T/2 > 5us
; For I2C in fast mode (400kHz),   use T/2 > 1.3us
;*************************************************************************
;       .func main_delay
my_i2c_delay:             ; 3 cycles,
; =============================
;    delay loop generator
;     3 cycles:
; -----------------------------
; delaying 41 cycles, 1 ldi, 3 cycles per loop, ret 4 cycles
          ldi  r16, 13  ; 1
wg_loop:  dec  r16       ; 1
         brne wg_loop    ; 1 false | 2 true
         nop
         ret             ; 4 cycles

;    ret                 ; 3 cycles
;        .endfunc        ; total 48 cyles = 5.0 microsec with 9.6 Mhz clock
                         ; since 10 cycles = 5.0 microsec with 2 Mhz clock
; =============================


;***************************************************************************
;*
;* PROGRAM
;*      main - Test of I2C master implementation
;*
;* DESCRIPTION
;*      Initializes I2C interface and shows an example of using it.
;*
;***************************************************************************

reset:
        ldi     temp, 0x38
        rcall   longDelay

        sbi DDRB, 0
        sbi PORTB, 0
        sbi DDRB, 2
        sbi PORTB, 2

        sbi     PORTB, 1
        rcall   i2c_init                ; initialize I2C interface
main:


        ldi     r18, 0x3a       ; Set device address and write
        ldi     r20, i2cwr

        rcall   i2c_start               ; Send start condition and address

        ldi     r17, 0x2d               ; Write word address (0x0
        rcall   i2c_do_transfer         ; Execute transfer

        ldi     r17, 8          ; Set write data to 00001000
        rcall   i2c_do_transfer         ; Execute transfer


        rcall   i2c_stop
        ldi     r18, 0x3a       ; Set device address and write
        ldi     r20, i2cwr
        rcall   i2c_start


        ldi     r17, 0x30               ; Write word address, interupt reg
        rcall   i2c_do_transfer         ; Execute transfer

        rcall   i2c_stop

        ldi     r18, 0x3b       ; Set device address and read
        ldi     r20, i2crd
        rcall   i2c_rep_start           ; Send repeated start condition and address

        sec                             ; Set no acknowledge (read is followed by a stop condition)
        rcall   i2c_do_transfer         ; Execute transfer (read)

        rcall   i2c_stop                ; Send stop condition - releases bus

        cbi     PORTB, 0
        cbi     PORTB, 1
        cbi     PORTB, 2
        sbrc    r17, 5
        sbi     PORTB, 2
        sbrc    r17, 4
        sbi     PORTB, 1
        sbrc    r17, 6
        sbi     PORTB, 0
        ldi     r16, 0x50
        rcall   longDelay

        rjmp    main                    ; Loop forever

;**** End of File ****

; get adxl values

; process values

; flip pins
