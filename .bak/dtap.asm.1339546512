;
; i2cADXL345.asm
;
; LED blinking through ADXL345 tap/dtap interrupts.
;
;
; copyright (CC BY-NC 3.0)
; http://creativecommons.org/licenses/by-nc/3.0/
;
; Version           : 0.1
; Date		    : 20120613
; Author	    : Michael Tomkins
; Target MCU        : ATTiny13A
;

;**** Includes ****

; You can get the tn13def.inc from http://www.attiny.com/software/AVR000.zip
; or http://www.atmel.com/products/microcontrollers/avr/tinyAVR.aspx

.include "tn13def.inc"			; My syntax fixed version.

; i2c library from
; http://www.cs.washington.edu/education/courses/cse466/00au/Projects/LakeMan/adv/datasheets/i2c_ex.asm
;.include "i2c_ex.S"

.include "libi2c.S"			; My syntax fixed version, changed i2c delay length (48 cycles)


;**** Global I2C Constants ****

.equ	SCLP	, 4			; SCL Pin number (port B)
.equ	SDAP	, 3			; SDA Pin number (port B)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; write address value
;
.macro writei2c adr val
        ldi     r18, 0x3a               ; Set device address and write
        ldi     r20, i2cwr
        rcall   i2c_start               ; Send start condition and address
        ldi     r17, \adr               ; Write word address
        rcall   i2c_do_transfer         ; Execute transfer
        ldi     r17, \val		; Value
        rcall   i2c_do_transfer         ; Execute transfer
        rcall   i2c_stop
.endm


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; read address value, placed in r17
;
.macro readi2c adr
        rcall   i2c_stop
        ldi     r18, 0x3a               ; Set device address and write
        ldi     r20, i2cwr
        rcall   i2c_start
        ldi     r17, \adr               ; Write word address
        rcall   i2c_do_transfer         ; Execute transfer
        rcall   i2c_stop
        ldi     r18, 0x3b               ; Set device address and read
        ldi     r20, i2crd
        rcall   i2c_rep_start           ; Send repeated start condition and address
        sec                             ; Set no acknowledge (read is followed by a stop condition)
        rcall   i2c_do_transfer         ; Execute transfer (read)
        rcall   i2c_stop                ; Send stop condition - releases bus
.endm



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; read address value, placed in r17
; (~590000 cycles times x-1)

;	ldi   r19, \x
delayx: dec   r0
        brne  delayx
        dec   r1
        brne  delayx
        dec   r19
        brne  delayx
	ret


RESET:
        sbi	DDRB, 0
        sbi	PORTB, 0
        sbi	DDRB, 2
        sbi	PORTB, 2

	sbi     PORTB, 1
	rcall	i2c_init		; initialize I2C interface
	ldi	r22, 0x03
	ldi	r23, 0

main:
        sbi     PORTB, 0
	ldi	r19, 0x20
	rcall	delayx
        cbi     PORTB, 0
	ldi	r19, 0x08
	rcall	delayx
	rjmp	main			; Loop forewer

;**** End of File ****


